from sphinx.builders import Builder
from six import StringIO
import xml2rst
import re
import os
import sys

string_type = str if  sys.version_info.major == 3 else unicode

def mangleCPPIdentifier(id) :
    out = StringIO.StringIO()
    for t in ['class', 'function', 'enum'] :
        if t in id[:len(t)] :
            id = id[len(t):]
    underscore = False
    for c in id :
        if c != '_' :
            if underscore :
                if c == '1' :
                    out.write(':')
                else :
                    out.write(c.upper())
            else :
                out.write(c)
            underscore = False
        else :
            if underscore :
                out.write('_')
            underscore = not underscore
    return out.read()

class CDocstringBuilder(Builder) :
    """
    Builds C style strings with the docstrings to use in Boosth Python
    """
    name = 'docstrings'
    format = 'docstrings'

    def __init__(self, app) :
        super(CDocstringBuilder, self).__init__(app)

    def get_relative_uri(self, docname, typ=None):
        # This is irrelevant
        return docname

    def get_outdated_docs(self) :
        return 'all'

    def init(self) :
        pass

    def prepare_writing(self, docnames) :
        pass

    def write_doc(self, docname, doctree) :

        xml2rst.setDefaultOptions()
        this_file_path = os.path.dirname(__file__)
        mainXsltF = open(this_file_path + '/xml2rst.xsl','r')

        comments = StringIO()
        # Sorting the names alphabetically to minimize changes over reviews.
        nodes = []
        for node in doctree:
            if not 'unmangled_name' in node :
                # Skipping node without name
                continue
            nodes.append((node['unmangled_fqname'], node))
        nodes.sort()

        for name, node in nodes:
            comments.write('m["%s"] = "' % name)

            for node in node :
                domtree=node.asdom()
                inF = StringIO()
                domtree.writexml(inF,indent="", addindent="",newl="")
                inF.seek(0)
                outF = StringIO()
                xml2rst.convert(inF = inF, outF = outF, mainXsltF = mainXsltF)
                outF.seek(0)
                empty_line = False
                regex = re.compile('^[\s]*$')

                comment = StringIO()
                empty_comment = True
                for line in outF.read().split('\n') :
                    # Skipping second and following empty lines
                    if regex.match(line) :
                        empty_line = True
                    else :
                        if empty_line and not empty_comment :
                            comment.write('\\n')
                        empty_line = False
                        empty_comment = False
                        # Quoting some characters
                        line = re.sub('\\\\','\\\\\\\\', line)
                        line = re.sub('\t','\\\\t', line)
                        line = re.sub('"','\\\\"', line)
                        comment.write(line)
                        comment.write('\\n')
                comment.seek(0)
                comments.write(comment.read())
                inF.close()
                outF.close()

            comments.write('";\n')

        out = open(self.app.config.cpp_docstrings_out_file, 'w')
        out.write("""\
// File automatically generated by %s

void initDocStrings(std::map<std::string, std::string> &m)
{
""" % __file__)
        comments.seek(0)
        out.write(comments.read())
        out.write("}\n")

    def finish(self) :
        print('finish')

def setup(app) :
    app.add_builder(CDocstringBuilder)
    app.add_config_value('cpp_docstrings_out_file', False, False)
